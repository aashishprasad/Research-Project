#print(FALSE)
if(flag == 0){
game_table <- data.frame(game_name,developer,publisher,genre,platform,release_date,age_rating,game_rating)
flag <- 1
}else{
#print(game_name)
dummy_table <- data.frame(game_name,developer,publisher,genre,platform,release_date,age_rating,game_rating)
game_table <- rbind(game_table,dummy_table)
#remove(dummy_table)
}
}
}
}
}
}#ifClose
}
View(game_table)
game_table_distinct  <- distinct(game_table)
View(game_table_distinct)
for(l in 1:26){
val=LETTERS[l]
print(val)
if(l>9){#ifblock
# initiallizing
start = 0
n = 50
Sys.sleep(5)
for(k in 1:100){
if(start == 0){
website <- read_html(paste("https://ie.ign.com/games?letter=",val,sep = ''))
start = 1
}else{
weburl <- paste("https://ie.ign.com/games?startIndex=",n,"&letter=",val,sep = '')
website <- read_html(weburl)
n = n+ 50
print(weburl)
#print(n)
}
#Finding End of Page.
end_text <- website%>%html_nodes(".itemList")%>%html_text()
if(identical(end_text, "\n    \nNo Results.        ")){
print('##############EndOfPage#############')
break()
}
#scraping webpage data based on html paths taken from selector gadget
base_url <- "https://ie.ign.com"
titles <- website%>%html_nodes(".item-title a")%>%html_text()
titles_url <- paste(base_url, website%>%html_nodes(".item-title a")%>%html_attr('href'),sep = '')
titles_table <- data.frame(titles,titles_url)
for (i in 1:50) {
print(i)
tryCatch(
game_page <- read_html(as.vector(titles_table$titles_url[i])),error = function(e){NA}
)
game_name <- game_page%>%html_nodes("h1 span")%>%html_text()
developer <- substring(game_page%>%html_nodes(".developer")%>%html_text(),10)
publisher <- substring(game_page%>%html_nodes(".publisher")%>%html_text(),10)
release_date <- substring(game_page%>%html_nodes(".release-date")%>%html_text(),13)
platform <- substring(game_page%>%html_nodes(".platforms")%>%html_text(),10)
age_rating <- first(substring(game_page%>%html_nodes(".fake-link")%>%html_text(),6))
genre <- game_page%>%html_nodes(".about-object .jsx-1709341442 .jsx-1709341442:nth-child(2)")%>%html_text()
game_rating <- first(game_page%>%html_nodes(".hexagon-content")%>%html_text())
if(identical(age_rating, character(0))){
age_rating <- NA
}else if(identical(developer, character(0))){
developer <- NA
}else if(identical(publisher, character(0))){
publisher <- NA
}else if(identical(release_date, character(0))){
release_date <- NA
}else if(identical(platform, character(0))){
platform <- NA
}else if(identical(genre, character(0))){
genre <- NA
}
if(game_rating!= "nr"){
if(i == 1 && flag == 0){
#print(TRUE)
game_table <- data.frame(game_name,developer,publisher,genre,platform,release_date,age_rating,game_rating)
flag <- 1
}else{
#print(FALSE)
if(flag == 0){
game_table <- data.frame(game_name,developer,publisher,genre,platform,release_date,age_rating,game_rating)
flag <- 1
}else{
#print(game_name)
dummy_table <- data.frame(game_name,developer,publisher,genre,platform,release_date,age_rating,game_rating)
game_table <- rbind(game_table,dummy_table)
#remove(dummy_table)
}
}
}
}
}
}#ifClose
}
l
game_table_distinct  <- distinct(game_table)
View(game_table_distinct)
for(l in 1:26){
val=LETTERS[l]
print(val)
if(l>15){#ifblock
# initiallizing
start = 0
n = 50
Sys.sleep(5)
for(k in 1:100){
if(start == 0){
website <- read_html(paste("https://ie.ign.com/games?letter=",val,sep = ''))
start = 1
}else{
weburl <- paste("https://ie.ign.com/games?startIndex=",n,"&letter=",val,sep = '')
website <- read_html(weburl)
n = n+ 50
print(weburl)
#print(n)
}
#Finding End of Page.
end_text <- website%>%html_nodes(".itemList")%>%html_text()
if(identical(end_text, "\n    \nNo Results.        ")){
print('##############EndOfPage#############')
break()
}
#scraping webpage data based on html paths taken from selector gadget
base_url <- "https://ie.ign.com"
titles <- website%>%html_nodes(".item-title a")%>%html_text()
titles_url <- paste(base_url, website%>%html_nodes(".item-title a")%>%html_attr('href'),sep = '')
titles_table <- data.frame(titles,titles_url)
for (i in 1:50) {
print(i)
tryCatch(
game_page <- read_html(as.vector(titles_table$titles_url[i])),error = function(e){NA}
)
game_name <- game_page%>%html_nodes("h1 span")%>%html_text()
developer <- substring(game_page%>%html_nodes(".developer")%>%html_text(),10)
publisher <- substring(game_page%>%html_nodes(".publisher")%>%html_text(),10)
release_date <- substring(game_page%>%html_nodes(".release-date")%>%html_text(),13)
platform <- substring(game_page%>%html_nodes(".platforms")%>%html_text(),10)
age_rating <- first(substring(game_page%>%html_nodes(".fake-link")%>%html_text(),6))
genre <- game_page%>%html_nodes(".about-object .jsx-1709341442 .jsx-1709341442:nth-child(2)")%>%html_text()
game_rating <- first(game_page%>%html_nodes(".hexagon-content")%>%html_text())
if(identical(age_rating, character(0))){
age_rating <- NA
}else if(identical(developer, character(0))){
developer <- NA
}else if(identical(publisher, character(0))){
publisher <- NA
}else if(identical(release_date, character(0))){
release_date <- NA
}else if(identical(platform, character(0))){
platform <- NA
}else if(identical(genre, character(0))){
genre <- NA
}
if(game_rating!= "nr"){
if(i == 1 && flag == 0){
#print(TRUE)
game_table <- data.frame(game_name,developer,publisher,genre,platform,release_date,age_rating,game_rating)
flag <- 1
}else{
#print(FALSE)
if(flag == 0){
game_table <- data.frame(game_name,developer,publisher,genre,platform,release_date,age_rating,game_rating)
flag <- 1
}else{
#print(game_name)
dummy_table <- data.frame(game_name,developer,publisher,genre,platform,release_date,age_rating,game_rating)
game_table <- rbind(game_table,dummy_table)
#remove(dummy_table)
}
}
}
}
}
}#ifClose
}
game_table_distinct  <- distinct(game_table)
l
for(l in 1:26){
val=LETTERS[l]
print(val)
if(l>18){#ifblock
# initiallizing
start = 0
n = 50
Sys.sleep(5)
for(k in 1:100){
if(start == 0){
website <- read_html(paste("https://ie.ign.com/games?letter=",val,sep = ''))
start = 1
}else{
weburl <- paste("https://ie.ign.com/games?startIndex=",n,"&letter=",val,sep = '')
website <- read_html(weburl)
n = n+ 50
print(weburl)
#print(n)
}
#Finding End of Page.
end_text <- website%>%html_nodes(".itemList")%>%html_text()
if(identical(end_text, "\n    \nNo Results.        ")){
print('##############EndOfPage#############')
break()
}
#scraping webpage data based on html paths taken from selector gadget
base_url <- "https://ie.ign.com"
titles <- website%>%html_nodes(".item-title a")%>%html_text()
titles_url <- paste(base_url, website%>%html_nodes(".item-title a")%>%html_attr('href'),sep = '')
titles_table <- data.frame(titles,titles_url)
for (i in 1:50) {
print(i)
tryCatch(
game_page <- read_html(as.vector(titles_table$titles_url[i])),error = function(e){NA}
)
game_name <- game_page%>%html_nodes("h1 span")%>%html_text()
developer <- substring(game_page%>%html_nodes(".developer")%>%html_text(),10)
publisher <- substring(game_page%>%html_nodes(".publisher")%>%html_text(),10)
release_date <- substring(game_page%>%html_nodes(".release-date")%>%html_text(),13)
platform <- substring(game_page%>%html_nodes(".platforms")%>%html_text(),10)
age_rating <- first(substring(game_page%>%html_nodes(".fake-link")%>%html_text(),6))
genre <- game_page%>%html_nodes(".about-object .jsx-1709341442 .jsx-1709341442:nth-child(2)")%>%html_text()
game_rating <- first(game_page%>%html_nodes(".hexagon-content")%>%html_text())
if(identical(age_rating, character(0))){
age_rating <- NA
}else if(identical(developer, character(0))){
developer <- NA
}else if(identical(publisher, character(0))){
publisher <- NA
}else if(identical(release_date, character(0))){
release_date <- NA
}else if(identical(platform, character(0))){
platform <- NA
}else if(identical(genre, character(0))){
genre <- NA
}
if(game_rating!= "nr"){
if(i == 1 && flag == 0){
#print(TRUE)
game_table <- data.frame(game_name,developer,publisher,genre,platform,release_date,age_rating,game_rating)
flag <- 1
}else{
#print(FALSE)
if(flag == 0){
game_table <- data.frame(game_name,developer,publisher,genre,platform,release_date,age_rating,game_rating)
flag <- 1
}else{
#print(game_name)
dummy_table <- data.frame(game_name,developer,publisher,genre,platform,release_date,age_rating,game_rating)
game_table <- rbind(game_table,dummy_table)
#remove(dummy_table)
}
}
}
}
}
}#ifClose
}
game_table_distinct  <- distinct(game_table)
View(game_table_distinct)
write.csv(game_table_distinct, file = "D:/DA/Semester_3/Research Project/Dataset/ign_video_games.csv")
test_df = game_table_distinct
test_df[1]
View(test_df)
test_df[4,1]
test_df[1,4]
if(test_df[1,4]== 'Platformer'){
print(TRUE)
}else{
print(FALSE)
}
test_df = game_table_distinct
if(test_df[2,4]== 'Platformer'){
print(TRUE)
}else{
print(FALSE)
}
pos = regexpr('Platformer', test_df[2,4])
pos
pos = regexpr('Platformer', test_df[1,4])
pos
pos = grep('Platformer', test_df[1,4])
pos
pos = grep('Platformer', test_df[2,4])
pos
if(grep('Platformer', test_df[2,4])==1){
print('found')
}
if(grep('Platformer', test_df[1,4])==1){
print('found')
}
t=grep('Platformer', test_df[1,4])
t
t=grep('Platformer', test_df[2,4])
t
if(t=0){
print('hi')
}
t=grep('Platformer', test_df[2,4])
t
if(t==0){
print('hi')
}
nchar(t)
if(nchar(t)==0){
print('hi')
}
if(!t>=1){
print('hi')
}
t=regexpr('Platformer', test_df[2,4])
t
if(t!=1){
print('hi')
}
t=regexpr('Platformer', test_df[1,4])
if(t!=1){
print('hi')
}else{
print('hello')
}
if(regexpr('Platformer', test_df[1,4])!=1){
print('hi')
}else{
print('hello')
}
if(regexpr('Platformer', test_df[2,4])!=1){
print('hi')
}else{
print('hello')
}
if(regexpr('Wii', test_df[1,5])!=1){
print('hi')
}else{
print('hello')
}
if(regexpr('Xbox', test_df[1,5])!=1){
print('hi')
}else{
print('hello')
}
if(regexpr('Xbox One', test_df[1,5])!=1){
print('hi')
}else{
print('hello')
}
if(regexpr('NES', test_df[1,5])!=1){
print('hi')
}else{
print('hello')
}
if(regexpr('PC', test_df[1,5])!=1){
print('hi')
}else{
print('hello')
}
if(regexpr(' PC', test_df[1,5])!=1){
print('hi')
}else{
print('hello')
}
if(regexpr('Wii', test_df[1,5])!=1){
print('hi')
}else{
print('hello')
}
if(regexpr('Wii, Xbox One', test_df[1,5])!=1){
print('hi')
}else{
print('hello')
}
if(regexpr('Xbox One', test_df[1,5])!=1){
print('hi')
}else{
print('hello')
}
grep('Xbox One', test_df[1,5])
grep('Xbox One', test_df[2,5])
if(grep('Xbox One', test_df[2,5])==1){
print('success')
}
if(grep('Xbox One', test_df[2,5])!=1){
print('success')
}
if(grep('Xbox One', test_df[2,5])==FALSE){
print('success')
}
if(grep('Xbox One', test_df[2,5])= NA){
print('success')
}
if(is.na(grep('Xbox One', test_df[2,5]))){
print('success')
}
if(is.!na(grep('Xbox One', test_df[2,5]))){
print('success')
}
if(is.!na(grep('Xbox One', test_df[1,5]))){
print('success')
}
if(is.!na(grep('Xbox One', test_df[1,5]))){
print('success')
}
if(is.!na(grep('Xbox One', test_df[1,5]))){
print('success')
if(is.!na(grep('PC', test_df[1,5]))){
print('success')
}
if(is.!na(grep('NES', test_df[1,5]))){
print('success')
if(regexpr('Xbox One', test_df[1,5])!=1){
print('hi')
}else{
print('hello')
}
if(is.!na(grep('Wii', test_df[1,5])) & grep('Wii', test_df[1,5])==1){
print('success')
}
grep('Wii', test_df[1,5])
if(is.!na(grep('Wii', test_df[1,5])) & grep('Wii', test_df[1,5])==1){
print('success')
if(is.!na(grep('PC', test_df[1,5])) & grep('PC', test_df[1,5])==1){
print('success')
if(is.!na(grep('NES', test_df[1,5])) & grep('NES', test_df[1,5])==1){
print('success')
grep('NES', test_df[1,5])
if(is.!na(grep('NES', test_df[1,5])) & grep('NES', test_df[1,5])==1){
print('success')
if(is.!na(grep('NES', test_df[1,5])) && grep('NES', test_df[1,5])==1){
print('success')
if(is.!na(grep('NES', test_df[1,5])) && grep('NES', test_df[1,5])==1){
print('success')
}
if(is.!na(grep('NES', test_df[1,5])) && grep('NES', test_df[1,5])==1){
print('success')
}else{
print('in else')
}
grepl(test_df[1,5],'Wii')
grepl(test_df[1,5],'NES')
test_df[1,5]
grepl('NES',test_df[1,5])
grepl('Wii',test_df[1,5])
grepl('PC',test_df[1,5])
grepl('Xbox',test_df[1,5])
grepl('Xbox',test_df[2,5])
grepl('NES',test_df[2,5])
grepl('Wii',test_df[2,5])
if(grepl('Wii',test_df[2,5])==TRUE){
print('success')
}
if(grepl('PC',test_df[2,5])==TRUE){
print('success')
}
if(grepl('PC',test_df[1,5])==TRUE){
print('success')
}
if(grepl('NES',test_df[1,5])==TRUE){
print('success')
}
nrow(test_df)
for(i in nrow(test_df)){
print(i)
}
for(i in 1:nrow(test_df)){
print(i)
}
for(i in 1:nrow(test_df)){
if(grepl('NES',test_df[i,5])==TRUE){
print('success')
}else{
print('no')
}
for(i in 1:nrow(test_df)){
if(grepl('NES',test_df[i,5])==TRUE){
print('success')
}else{
print('no')
}
for(i in 1:nrow(test_df)){
if(grepl('NES',test_df[i,5])==TRUE){
print('success')
}else{
print('no')
}
}
i
for(i in 1:nrow(test_df)){
print(i)
if(grepl('NES',test_df[i,5])==TRUE){
print('success')
}else{
print('no')
}
}
for(i in 1:nrow(test_df)){
print(i)
}
i=1
for(i in 1:nrow(test_df)){
print(i)
}
if(grepl('NES',test_df[1,5])==TRUE){
print('success')
}
}
if(grepl('NES',test_df[1,5])==TRUE){
print('success')
}
if(grepl('NES',test_df[1,5])==TRUE){
print('success')
}
nrow(test_df)
